/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Courier from "../../../index";
export declare namespace Templates {
    interface Options {
        environment?: core.Supplier<environments.CourierEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        authorizationToken?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Templates {
    protected readonly _options: Templates.Options;
    constructor(_options?: Templates.Options);
    /**
     * Returns a list of notification templates
     *
     * @param {Courier.ListTemplatesRequest} request
     * @param {Templates.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.templates.list()
     */
    list(request?: Courier.ListTemplatesRequest, requestOptions?: Templates.RequestOptions): core.HttpResponsePromise<Courier.ListTemplatesResponse>;
    private __list;
    protected _getAuthorizationHeader(): Promise<string>;
}
