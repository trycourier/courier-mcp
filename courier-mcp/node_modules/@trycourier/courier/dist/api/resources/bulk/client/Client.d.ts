/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Courier from "../../../index";
export declare namespace Bulk {
    interface Options {
        environment?: core.Supplier<environments.CourierEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        authorizationToken?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
    interface IdempotentRequestOptions extends RequestOptions {
        idempotencyKey?: string | undefined;
        idempotencyExpiry?: string | undefined;
    }
}
export declare class Bulk {
    protected readonly _options: Bulk.Options;
    constructor(_options?: Bulk.Options);
    /**
     * @param {Courier.BulkCreateJobParams} request
     * @param {Bulk.IdempotentRequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await client.bulk.createJob({
     *         message: {
     *             brand: undefined,
     *             data: undefined,
     *             event: undefined,
     *             locale: undefined,
     *             override: undefined,
     *             message: undefined
     *         }
     *     })
     */
    createJob(request: Courier.BulkCreateJobParams, requestOptions?: Bulk.IdempotentRequestOptions): core.HttpResponsePromise<Courier.BulkCreateJobResponse>;
    private __createJob;
    /**
     * Ingest user data into a Bulk Job
     *
     * @param {string} jobId - A unique identifier representing the bulk job
     * @param {Courier.BulkIngestUsersParams} request
     * @param {Bulk.IdempotentRequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.bulk.ingestUsers("job_id", {
     *         users: [{
     *                 preferences: undefined,
     *                 profile: undefined,
     *                 recipient: undefined,
     *                 data: undefined,
     *                 to: undefined
     *             }, {
     *                 preferences: undefined,
     *                 profile: undefined,
     *                 recipient: undefined,
     *                 data: undefined,
     *                 to: undefined
     *             }]
     *     })
     */
    ingestUsers(jobId: string, request: Courier.BulkIngestUsersParams, requestOptions?: Bulk.IdempotentRequestOptions): core.HttpResponsePromise<void>;
    private __ingestUsers;
    /**
     * Run a bulk job
     *
     * @param {string} jobId - A unique identifier representing the bulk job
     * @param {Bulk.IdempotentRequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await client.bulk.runJob("job_id")
     */
    runJob(jobId: string, requestOptions?: Bulk.IdempotentRequestOptions): core.HttpResponsePromise<void>;
    private __runJob;
    /**
     * Get a bulk job
     *
     * @param {string} jobId - A unique identifier representing the bulk job
     * @param {Bulk.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await client.bulk.getJob("job_id")
     */
    getJob(jobId: string, requestOptions?: Bulk.RequestOptions): core.HttpResponsePromise<Courier.BulkGetJobResponse>;
    private __getJob;
    /**
     * Get Bulk Job Users
     *
     * @param {string} jobId - A unique identifier representing the bulk job
     * @param {Courier.BulkGetUsersParams} request
     * @param {Bulk.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await client.bulk.getUsers("job_id")
     */
    getUsers(jobId: string, request?: Courier.BulkGetUsersParams, requestOptions?: Bulk.RequestOptions): core.HttpResponsePromise<Courier.BulkGetJobUsersResponse>;
    private __getUsers;
    protected _getAuthorizationHeader(): Promise<string>;
}
