/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Courier from "../../../index";
export declare namespace Tenants {
    interface Options {
        environment?: core.Supplier<environments.CourierEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        authorizationToken?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Tenants {
    protected readonly _options: Tenants.Options;
    constructor(_options?: Tenants.Options);
    /**
     * @param {string} tenantId - A unique identifier representing the tenant to be returned.
     * @param {Courier.TenantCreateOrReplaceParams} request
     * @param {Tenants.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await client.tenants.createOrReplace("tenant_id", {
     *         name: "name",
     *         parent_tenant_id: undefined,
     *         default_preferences: undefined,
     *         properties: undefined,
     *         user_profile: undefined,
     *         brand_id: undefined
     *     })
     */
    createOrReplace(tenantId: string, request: Courier.TenantCreateOrReplaceParams, requestOptions?: Tenants.RequestOptions): core.HttpResponsePromise<Courier.Tenant>;
    private __createOrReplace;
    /**
     * @param {string} tenantId - A unique identifier representing the tenant to be returned.
     * @param {Tenants.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await client.tenants.get("tenant_id")
     */
    get(tenantId: string, requestOptions?: Tenants.RequestOptions): core.HttpResponsePromise<Courier.Tenant>;
    private __get;
    /**
     * @param {Courier.ListTenantParams} request
     * @param {Tenants.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.tenants.list()
     */
    list(request?: Courier.ListTenantParams, requestOptions?: Tenants.RequestOptions): core.HttpResponsePromise<Courier.TenantListResponse>;
    private __list;
    /**
     * @param {string} tenantId - Id of the tenant to be deleted.
     * @param {Tenants.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.tenants.delete("tenant_id")
     */
    delete(tenantId: string, requestOptions?: Tenants.RequestOptions): core.HttpResponsePromise<void>;
    private __delete;
    /**
     * @param {string} tenantId - Id of the tenant for user membership.
     * @param {Courier.ListUsersForTenantParams} request
     * @param {Tenants.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await client.tenants.getUsersByTenant("tenant_id")
     */
    getUsersByTenant(tenantId: string, request?: Courier.ListUsersForTenantParams, requestOptions?: Tenants.RequestOptions): core.HttpResponsePromise<Courier.ListUsersForTenantResponse>;
    private __getUsersByTenant;
    /**
     * @param {string} tenantId - Id of the tenant to update the default preferences for.
     * @param {string} topicId - Id fo the susbcription topic you want to have a default preference for.
     * @param {Courier.SubscriptionTopicNew} request
     * @param {Tenants.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.tenants.createOrReplaceDefaultPreferencesForTopic("tenantABC", "HB529N49MD4D5PMX9WR5P4JH78NA", {
     *         status: "OPTED_IN",
     *         has_custom_routing: true,
     *         custom_routing: ["inbox"]
     *     })
     */
    createOrReplaceDefaultPreferencesForTopic(tenantId: string, topicId: string, request: Courier.SubscriptionTopicNew, requestOptions?: Tenants.RequestOptions): core.HttpResponsePromise<void>;
    private __createOrReplaceDefaultPreferencesForTopic;
    /**
     * @param {string} tenantId - Id of the tenant to update the default preferences for.
     * @param {string} topicId - Id fo the susbcription topic you want to have a default preference for.
     * @param {Tenants.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.tenants.removeDefaultPreferencesForTopic("tenant_id", "topic_id")
     */
    removeDefaultPreferencesForTopic(tenantId: string, topicId: string, requestOptions?: Tenants.RequestOptions): core.HttpResponsePromise<void>;
    private __removeDefaultPreferencesForTopic;
    protected _getAuthorizationHeader(): Promise<string>;
}
