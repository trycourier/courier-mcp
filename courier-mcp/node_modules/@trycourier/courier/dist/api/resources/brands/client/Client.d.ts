/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Courier from "../../../index";
export declare namespace Brands {
    interface Options {
        environment?: core.Supplier<environments.CourierEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        authorizationToken?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
    interface IdempotentRequestOptions extends RequestOptions {
        idempotencyKey?: string | undefined;
        idempotencyExpiry?: string | undefined;
    }
}
export declare class Brands {
    protected readonly _options: Brands.Options;
    constructor(_options?: Brands.Options);
    /**
     * @param {Courier.BrandParameters} request
     * @param {Brands.IdempotentRequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     * @throws {@link Courier.PaymentRequiredError}
     * @throws {@link Courier.AlreadyExistsError}
     *
     * @example
     *     await client.brands.create({
     *         id: undefined,
     *         name: "name",
     *         settings: {
     *             colors: undefined,
     *             inapp: undefined,
     *             email: undefined
     *         },
     *         snippets: undefined
     *     })
     */
    create(request: Courier.BrandParameters, requestOptions?: Brands.IdempotentRequestOptions): core.HttpResponsePromise<Courier.Brand>;
    private __create;
    /**
     * Fetch a specific brand by brand ID.
     *
     * @param {string} brandId - A unique identifier associated with the brand you wish to retrieve.
     * @param {Brands.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.brands.get("brand_id")
     */
    get(brandId: string, requestOptions?: Brands.RequestOptions): core.HttpResponsePromise<Courier.Brand>;
    private __get;
    /**
     * Get the list of brands.
     *
     * @param {Courier.ListBrandsRequest} request
     * @param {Brands.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.brands.list()
     */
    list(request?: Courier.ListBrandsRequest, requestOptions?: Brands.RequestOptions): core.HttpResponsePromise<Courier.BrandsResponse>;
    private __list;
    /**
     * Delete a brand by brand ID.
     *
     * @param {string} brandId - A unique identifier associated with the brand you wish to retrieve.
     * @param {Brands.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.ConflictError}
     *
     * @example
     *     await client.brands.delete("brand_id")
     */
    delete(brandId: string, requestOptions?: Brands.RequestOptions): core.HttpResponsePromise<void>;
    private __delete;
    /**
     * Replace an existing brand with the supplied values.
     *
     * @param {string} brandId - A unique identifier associated with the brand you wish to update.
     * @param {Courier.BrandUpdateParameters} request
     * @param {Brands.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.brands.replace("brand_id", {
     *         name: "name",
     *         settings: undefined,
     *         snippets: undefined
     *     })
     */
    replace(brandId: string, request: Courier.BrandUpdateParameters, requestOptions?: Brands.RequestOptions): core.HttpResponsePromise<Courier.Brand>;
    private __replace;
    protected _getAuthorizationHeader(): Promise<string>;
}
