/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Courier from "../../../index";
export declare namespace Profiles {
    interface Options {
        environment?: core.Supplier<environments.CourierEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        authorizationToken?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
    interface IdempotentRequestOptions extends RequestOptions {
        idempotencyKey?: string | undefined;
        idempotencyExpiry?: string | undefined;
    }
}
export declare class Profiles {
    protected readonly _options: Profiles.Options;
    constructor(_options?: Profiles.Options);
    /**
     * Returns the specified user profile.
     *
     * @param {string} userId - A unique identifier representing the user associated with the requested profile.
     * @param {Profiles.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await client.profiles.get("user_id")
     */
    get(userId: string, requestOptions?: Profiles.RequestOptions): core.HttpResponsePromise<Courier.ProfileGetResponse>;
    private __get;
    /**
     * Merge the supplied values with an existing profile or create a new profile if one doesn't already exist.
     *
     * @param {string} userId - A unique identifier representing the user associated with the requested profile.
     * @param {Courier.MergeProfileRequest} request
     * @param {Profiles.IdempotentRequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await client.profiles.create("user_id", {
     *         profile: {
     *             "profile": {
     *                 "key": "value"
     *             }
     *         }
     *     })
     */
    create(userId: string, request: Courier.MergeProfileRequest, requestOptions?: Profiles.IdempotentRequestOptions): core.HttpResponsePromise<Courier.MergeProfileResponse>;
    private __create;
    /**
     * When using `PUT`, be sure to include all the key-value pairs required by the recipient's profile.
     * Any key-value pairs that exist in the profile but fail to be included in the `PUT` request will be
     * removed from the profile. Remember, a `PUT` update is a full replacement of the data. For partial updates,
     * use the [Patch](https://www.courier.com/docs/reference/profiles/patch/) request.
     *
     * @param {string} userId - A unique identifier representing the user associated with the requested profile.
     * @param {Courier.ReplaceProfileRequest} request
     * @param {Profiles.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await client.profiles.replace("user_id", {
     *         profile: {
     *             "profile": {
     *                 "key": "value"
     *             }
     *         }
     *     })
     */
    replace(userId: string, request: Courier.ReplaceProfileRequest, requestOptions?: Profiles.RequestOptions): core.HttpResponsePromise<Courier.ReplaceProfileResponse>;
    private __replace;
    /**
     * @param {string} userId - A unique identifier representing the user associated with the requested profile.
     * @param {Courier.ProfileUpdateRequest} request
     * @param {Profiles.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.profiles.mergeProfile("user_id", {
     *         patch: [{
     *                 op: "op",
     *                 path: "path",
     *                 value: "value"
     *             }, {
     *                 op: "op",
     *                 path: "path",
     *                 value: "value"
     *             }]
     *     })
     */
    mergeProfile(userId: string, request: Courier.ProfileUpdateRequest, requestOptions?: Profiles.RequestOptions): core.HttpResponsePromise<void>;
    private __mergeProfile;
    /**
     * Deletes the specified user profile.
     *
     * @param {string} userId - A unique identifier representing the user associated with the requested profile.
     * @param {Profiles.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await client.profiles.delete("user_id")
     */
    delete(userId: string, requestOptions?: Profiles.RequestOptions): core.HttpResponsePromise<void>;
    private __delete;
    /**
     * Returns the subscribed lists for a specified user.
     *
     * @param {string} userId - A unique identifier representing the user associated with the requested profile.
     * @param {Courier.GetListSubscriptionsRequest} request
     * @param {Profiles.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await client.profiles.getListSubscriptions("user_id")
     */
    getListSubscriptions(userId: string, request?: Courier.GetListSubscriptionsRequest, requestOptions?: Profiles.RequestOptions): core.HttpResponsePromise<Courier.GetListSubscriptionsResponse>;
    private __getListSubscriptions;
    /**
     * Subscribes the given user to one or more lists. If the list does not exist, it will be created.
     *
     * @param {string} userId - A unique identifier representing the user associated with the requested profile.
     * @param {Courier.SubscribeToListsRequest} request
     * @param {Profiles.IdempotentRequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await client.profiles.subscribeToLists("user_id", {
     *         lists: [{
     *                 listId: "listId",
     *                 preferences: undefined
     *             }, {
     *                 listId: "listId",
     *                 preferences: undefined
     *             }]
     *     })
     */
    subscribeToLists(userId: string, request: Courier.SubscribeToListsRequest, requestOptions?: Profiles.IdempotentRequestOptions): core.HttpResponsePromise<Courier.SubscribeToListsResponse>;
    private __subscribeToLists;
    /**
     * Removes all list subscriptions for given user.
     *
     * @param {string} userId - A unique identifier representing the user associated with the requested profile.
     * @param {Profiles.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await client.profiles.deleteListSubscription("user_id")
     */
    deleteListSubscription(userId: string, requestOptions?: Profiles.RequestOptions): core.HttpResponsePromise<Courier.DeleteListSubscriptionResponse>;
    private __deleteListSubscription;
    protected _getAuthorizationHeader(): Promise<string>;
}
