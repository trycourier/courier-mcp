/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "./environments";
import * as core from "./core";
import * as Courier from "./api/index";
import { Audiences } from "./api/resources/audiences/client/Client";
import { AuditEvents } from "./api/resources/auditEvents/client/Client";
import { AuthTokens } from "./api/resources/authTokens/client/Client";
import { Automations } from "./api/resources/automations/client/Client";
import { Brands } from "./api/resources/brands/client/Client";
import { Bulk } from "./api/resources/bulk/client/Client";
import { Inbound } from "./api/resources/inbound/client/Client";
import { Lists } from "./api/resources/lists/client/Client";
import { Messages } from "./api/resources/messages/client/Client";
import { Notifications } from "./api/resources/notifications/client/Client";
import { Profiles } from "./api/resources/profiles/client/Client";
import { Templates } from "./api/resources/templates/client/Client";
import { Tenants } from "./api/resources/tenants/client/Client";
import { Translations } from "./api/resources/translations/client/Client";
import { Users } from "./api/resources/users/client/Client";
export declare namespace CourierClient {
    interface Options {
        environment?: core.Supplier<environments.CourierEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        authorizationToken?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
    interface IdempotentRequestOptions extends RequestOptions {
        idempotencyKey?: string | undefined;
        idempotencyExpiry?: string | undefined;
    }
}
export declare class CourierClient {
    protected readonly _options: CourierClient.Options;
    protected _audiences: Audiences | undefined;
    protected _auditEvents: AuditEvents | undefined;
    protected _authTokens: AuthTokens | undefined;
    protected _automations: Automations | undefined;
    protected _brands: Brands | undefined;
    protected _bulk: Bulk | undefined;
    protected _inbound: Inbound | undefined;
    protected _lists: Lists | undefined;
    protected _messages: Messages | undefined;
    protected _notifications: Notifications | undefined;
    protected _profiles: Profiles | undefined;
    protected _templates: Templates | undefined;
    protected _tenants: Tenants | undefined;
    protected _translations: Translations | undefined;
    protected _users: Users | undefined;
    constructor(_options?: CourierClient.Options);
    get audiences(): Audiences;
    get auditEvents(): AuditEvents;
    get authTokens(): AuthTokens;
    get automations(): Automations;
    get brands(): Brands;
    get bulk(): Bulk;
    get inbound(): Inbound;
    get lists(): Lists;
    get messages(): Messages;
    get notifications(): Notifications;
    get profiles(): Profiles;
    get templates(): Templates;
    get tenants(): Tenants;
    get translations(): Translations;
    get users(): Users;
    /**
     * Use the send API to send a message to one or more recipients.
     *
     * @param {Courier.SendMessageRequest} request
     * @param {CourierClient.IdempotentRequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.send({
     *         message: {
     *             to: {
     *                 email: "email@example.com"
     *             },
     *             content: {
     *                 title: "Welcome!",
     *                 body: "Thanks for signing up, {{name}}"
     *             },
     *             data: {
     *                 "name": "Peter Parker"
     *             },
     *             routing: {
     *                 method: "single",
     *                 channels: ["email"]
     *             }
     *         }
     *     })
     */
    send(request: Courier.SendMessageRequest, requestOptions?: CourierClient.IdempotentRequestOptions): core.HttpResponsePromise<Courier.SendMessageResponse>;
    private __send;
    protected _getAuthorizationHeader(): Promise<string>;
}
