/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Courier from "../../../index";
export declare namespace Notifications {
    interface Options {
        environment?: core.Supplier<environments.CourierEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        authorizationToken?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Notifications {
    protected readonly _options: Notifications.Options;
    constructor(_options?: Notifications.Options);
    /**
     * @param {Courier.NotificationListParams} request
     * @param {Notifications.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.notifications.list()
     */
    list(request?: Courier.NotificationListParams, requestOptions?: Notifications.RequestOptions): core.HttpResponsePromise<Courier.NotificationListResponse>;
    private __list;
    /**
     * @param {string} id
     * @param {Notifications.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.notifications.getContent("id")
     */
    getContent(id: string, requestOptions?: Notifications.RequestOptions): core.HttpResponsePromise<Courier.NotificationGetContentResponse>;
    private __getContent;
    /**
     * @param {string} id
     * @param {Notifications.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.notifications.getDraftContent("id")
     */
    getDraftContent(id: string, requestOptions?: Notifications.RequestOptions): core.HttpResponsePromise<Courier.NotificationGetContentResponse>;
    private __getDraftContent;
    /**
     * @param {string} id
     * @param {string} submissionId
     * @param {Notifications.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.notifications.getSubmissionChecks("id", "submissionId")
     */
    getSubmissionChecks(id: string, submissionId: string, requestOptions?: Notifications.RequestOptions): core.HttpResponsePromise<Courier.SubmissionChecksGetResponse>;
    private __getSubmissionChecks;
    /**
     * @param {string} id
     * @param {string} submissionId
     * @param {Courier.SubmissionChecksReplaceParams} request
     * @param {Notifications.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.notifications.replaceSubmissionChecks("id", "submissionId", {
     *         checks: [{
     *                 id: "id",
     *                 status: "RESOLVED",
     *                 type: "custom"
     *             }, {
     *                 id: "id",
     *                 status: "RESOLVED",
     *                 type: "custom"
     *             }]
     *     })
     */
    replaceSubmissionChecks(id: string, submissionId: string, request: Courier.SubmissionChecksReplaceParams, requestOptions?: Notifications.RequestOptions): core.HttpResponsePromise<Courier.SubmissionChecksReplaceResponse>;
    private __replaceSubmissionChecks;
    /**
     * @param {string} id
     * @param {string} submissionId
     * @param {Notifications.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.notifications.cancelSubmission("id", "submissionId")
     */
    cancelSubmission(id: string, submissionId: string, requestOptions?: Notifications.RequestOptions): core.HttpResponsePromise<void>;
    private __cancelSubmission;
    protected _getAuthorizationHeader(): Promise<string>;
}
