/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Courier from "../../../../../index";
export declare namespace Tokens {
    interface Options {
        environment?: core.Supplier<environments.CourierEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        authorizationToken?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Tokens {
    protected readonly _options: Tokens.Options;
    constructor(_options?: Tokens.Options);
    /**
     * Adds multiple tokens to a user and overwrites matching existing tokens.
     *
     * @param {string} userId - The user's ID. This can be any uniquely identifiable string.
     * @param {Tokens.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await client.users.tokens.addMultiple("user_id")
     */
    addMultiple(userId: string, requestOptions?: Tokens.RequestOptions): core.HttpResponsePromise<void>;
    private __addMultiple;
    /**
     * Adds a single token to a user and overwrites a matching existing token.
     *
     * @param {string} userId - The user's ID. This can be any uniquely identifiable string.
     * @param {string} token - The full token string.
     * @param {Courier.users.UserToken} request
     * @param {Tokens.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await client.users.tokens.add("user_id", "token", {
     *         token: undefined,
     *         provider_key: "firebase-fcm",
     *         expiry_date: undefined,
     *         properties: undefined,
     *         device: undefined,
     *         tracking: undefined
     *     })
     */
    add(userId: string, token: string, request: Courier.users.UserToken, requestOptions?: Tokens.RequestOptions): core.HttpResponsePromise<void>;
    private __add;
    /**
     * Apply a JSON Patch (RFC 6902) to the specified token.
     *
     * @param {string} userId - The user's ID. This can be any uniquely identifiable string.
     * @param {string} token - The full token string.
     * @param {Courier.users.PatchUserTokenOpts} request
     * @param {Tokens.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await client.users.tokens.update("user_id", "token", {
     *         patch: [{
     *                 op: "op",
     *                 path: "path",
     *                 value: undefined
     *             }, {
     *                 op: "op",
     *                 path: "path",
     *                 value: undefined
     *             }]
     *     })
     */
    update(userId: string, token: string, request: Courier.users.PatchUserTokenOpts, requestOptions?: Tokens.RequestOptions): core.HttpResponsePromise<void>;
    private __update;
    /**
     * Get single token available for a `:token`
     *
     * @param {string} userId - The user's ID. This can be any uniquely identifiable string.
     * @param {string} token - The full token string.
     * @param {Tokens.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await client.users.tokens.get("user_id", "token")
     */
    get(userId: string, token: string, requestOptions?: Tokens.RequestOptions): core.HttpResponsePromise<Courier.users.GetUserTokenResponse>;
    private __get;
    /**
     * Gets all tokens available for a :user_id
     *
     * @param {string} userId - The user's ID. This can be any uniquely identifiable string.
     * @param {Tokens.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await client.users.tokens.list("user_id")
     */
    list(userId: string, requestOptions?: Tokens.RequestOptions): core.HttpResponsePromise<Courier.users.GetAllTokensResponse>;
    private __list;
    /**
     * @param {string} userId - The user's ID. This can be any uniquely identifiable string.
     * @param {string} token - The full token string.
     * @param {Tokens.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.users.tokens.delete("user_id", "token")
     */
    delete(userId: string, token: string, requestOptions?: Tokens.RequestOptions): core.HttpResponsePromise<void>;
    private __delete;
    protected _getAuthorizationHeader(): Promise<string>;
}
