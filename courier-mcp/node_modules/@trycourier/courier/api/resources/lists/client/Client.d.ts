/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Courier from "../../../index";
export declare namespace Lists {
    interface Options {
        environment?: core.Supplier<environments.CourierEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        authorizationToken?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
    interface IdempotentRequestOptions extends RequestOptions {
        idempotencyKey?: string | undefined;
        idempotencyExpiry?: string | undefined;
    }
}
export declare class Lists {
    protected readonly _options: Lists.Options;
    constructor(_options?: Lists.Options);
    /**
     * Returns all of the lists, with the ability to filter based on a pattern.
     *
     * @param {Courier.GetAllListsRequest} request
     * @param {Lists.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await client.lists.list()
     */
    list(request?: Courier.GetAllListsRequest, requestOptions?: Lists.RequestOptions): core.HttpResponsePromise<Courier.ListGetAllResponse>;
    private __list;
    /**
     * Returns a list based on the list ID provided.
     *
     * @param {string} listId - A unique identifier representing the list you wish to retrieve.
     * @param {Lists.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.NotFoundError}
     *
     * @example
     *     await client.lists.get("list_id")
     */
    get(listId: string, requestOptions?: Lists.RequestOptions): core.HttpResponsePromise<Courier.List>;
    private __get;
    /**
     * Create or replace an existing list with the supplied values.
     *
     * @param {string} listId - A unique identifier representing the list you wish to retrieve.
     * @param {Courier.ListPutParams} request
     * @param {Lists.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.lists.update("list_id", {
     *         name: "name",
     *         preferences: undefined
     *     })
     */
    update(listId: string, request: Courier.ListPutParams, requestOptions?: Lists.RequestOptions): core.HttpResponsePromise<Courier.List>;
    private __update;
    /**
     * Delete a list by list ID.
     *
     * @param {string} listId - A unique identifier representing the list you wish to retrieve.
     * @param {Lists.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.lists.delete("list_id")
     */
    delete(listId: string, requestOptions?: Lists.RequestOptions): core.HttpResponsePromise<void>;
    private __delete;
    /**
     * Restore a previously deleted list.
     *
     * @param {string} listId - A unique identifier representing the list you wish to retrieve.
     * @param {Lists.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.lists.restore("list_id")
     */
    restore(listId: string, requestOptions?: Lists.RequestOptions): core.HttpResponsePromise<void>;
    private __restore;
    /**
     * Get the list's subscriptions.
     *
     * @param {string} listId - A unique identifier representing the list you wish to retrieve.
     * @param {Courier.GetSubscriptionForListRequest} request
     * @param {Lists.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.NotFoundError}
     *
     * @example
     *     await client.lists.getSubscribers("list_id")
     */
    getSubscribers(listId: string, request?: Courier.GetSubscriptionForListRequest, requestOptions?: Lists.RequestOptions): core.HttpResponsePromise<Courier.ListGetSubscriptionsResponse>;
    private __getSubscribers;
    /**
     * Subscribes the users to the list, overwriting existing subscriptions. If the list does not exist, it will be automatically created.
     *
     * @param {string} listId - A unique identifier representing the list you wish to retrieve.
     * @param {Courier.SubscribeUsersToListRequest} request
     * @param {Lists.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await client.lists.updateSubscribers("list_id", {
     *         recipients: [{
     *                 recipientId: "recipientId",
     *                 preferences: undefined
     *             }, {
     *                 recipientId: "recipientId",
     *                 preferences: undefined
     *             }]
     *     })
     */
    updateSubscribers(listId: string, request: Courier.SubscribeUsersToListRequest, requestOptions?: Lists.RequestOptions): core.HttpResponsePromise<void>;
    private __updateSubscribers;
    /**
     * Subscribes additional users to the list, without modifying existing subscriptions. If the list does not exist, it will be automatically created.
     *
     * @param {string} listId - A unique identifier representing the list you wish to retrieve.
     * @param {Courier.AddSubscribersToList} request
     * @param {Lists.IdempotentRequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await client.lists.addSubscribers("list_id", {
     *         recipients: [{
     *                 recipientId: "recipientId",
     *                 preferences: undefined
     *             }, {
     *                 recipientId: "recipientId",
     *                 preferences: undefined
     *             }]
     *     })
     */
    addSubscribers(listId: string, request: Courier.AddSubscribersToList, requestOptions?: Lists.IdempotentRequestOptions): core.HttpResponsePromise<void>;
    private __addSubscribers;
    /**
     * Subscribe a user to an existing list (note: if the List does not exist, it will be automatically created).
     *
     * @param {string} listId - A unique identifier representing the list you wish to retrieve.
     * @param {string} userId - A unique identifier representing the recipient associated with the list
     * @param {Courier.SubscribeUserToListRequest} request
     * @param {Lists.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.lists.subscribe("list_id", "user_id", {
     *         preferences: undefined
     *     })
     */
    subscribe(listId: string, userId: string, request?: Courier.SubscribeUserToListRequest, requestOptions?: Lists.RequestOptions): core.HttpResponsePromise<void>;
    private __subscribe;
    /**
     * Delete a subscription to a list by list ID and user ID.
     *
     * @param {string} listId - A unique identifier representing the list you wish to retrieve.
     * @param {string} userId - A unique identifier representing the recipient associated with the list
     * @param {Lists.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.NotFoundError}
     *
     * @example
     *     await client.lists.unsubscribe("list_id", "user_id")
     */
    unsubscribe(listId: string, userId: string, requestOptions?: Lists.RequestOptions): core.HttpResponsePromise<void>;
    private __unsubscribe;
    protected _getAuthorizationHeader(): Promise<string>;
}
